import Provider, {
  SIOPError,
  SIOPRequestValidationError,
  SIOPResponseGenerationError,
} from 'react-native-did-siop';
import {Resolver} from 'did-resolver';
import {getResolver as getWebResolver} from 'web-did-resolver';

const signIn = async () => {
  // Assume we've received this url from RP.
  const siopRequest =
    'https://example.com/deeplink?response_type=id_token&scope=openid%20did_authn&client_id=<...>&request_uri=<...>';
  try {
    const idTokenExpiresIn = 3600;
    const resolver = new Resolver({...getWebResolver()});
    // Instantiate Self-Issued OpenID Provider.
    const provider = new Provider(idTokenExpiresIn, resolver);
    // Parse and validate the SIOP request coming from RP.
    // You can also pass a parameter parsed by react-navigation.
    const clientId = await provider.receiveRequest(siopRequest);

    // Generate a SIOP response.
    // You can choose your personas based on the `clientId` returned above.
    let location = await provider.generateResponse(
      'did:example:persona1',
      keyPair, // keyPair generated by the elliptic library
      // You can include additional fields into id token in the return value.
      {vp_uri: 'https://credentials.example.xyz/12345'},
    );
    // You can use `location` directly as a redirection url to RP.
    await Linking.openURL(location);
  } catch (error) {
    if (error instanceof SIOPError) {
      if (error instanceof SIOPRequestValidationError) {
        // `error` is throwed at `receiveRequest()` in this case.
        console.error(error.error);
        console.error(error.invalidField);
        console.error(error.invalidValue);
      } else if (error instanceof SIOPResponseGenerationError) {
        // `error` is throwed at `generateResponse()`.
        console.error(error);
      }
      // Generate a redirect url able to be used as a error response to the RP.
      location = error.toResponse();
      await Linking.openURL(location);
    }
  }
};
