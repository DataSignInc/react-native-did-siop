/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv from 'ajv';
import {Registration} from './siop-schema.d';
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: 'fast',
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

// export {Registration};
export const RegistrationSchema = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  defaultProperties: [],
  properties: {
    authorization_endpoint: {
      enum: ['openid:'],
      type: 'string',
    },
    credential_formats_supported: {
      additionalItems: {
        anyOf: [
          {
            enum: ['jwt', 'jwt_vc', 'jwt_vp', 'ldp_vc', 'ldp_vp'],
            type: 'string',
          },
        ],
      },
      items: [
        {
          enum: ['jwt', 'jwt_vc', 'jwt_vp', 'ldp_vc', 'ldp_vp'],
          type: 'string',
        },
      ],
      minItems: 1,
      type: 'array',
    },
    did: {
      type: 'string',
    },
    did_methods_supported: {
      additionalItems: {
        anyOf: [
          {
            type: 'string',
          },
        ],
      },
      items: [
        {
          type: 'string',
        },
      ],
      minItems: 1,
      type: 'array',
    },
    id_token_encrypted_response_alg: {
      type: 'string',
    },
    id_token_encrypted_response_enc: {
      type: 'string',
    },
    id_token_signing_alg_values_supported: {
      additionalItems: {
        anyOf: [
          {
            enum: ['ES256', 'ES256K', 'EdDSA', 'RS256'],
            type: 'string',
          },
        ],
      },
      items: [
        {
          enum: ['ES256', 'ES256K', 'EdDSA', 'RS256'],
          type: 'string',
        },
      ],
      minItems: 1,
      type: 'array',
    },
    issuer: {
      enum: ['https://self-issued.me/v2'],
      type: 'string',
    },
    jwks: {},
    jwks_uri: {
      type: 'string',
    },
    logo_uri: {
      type: 'string',
    },
    policy_uri: {
      type: 'string',
    },
    redirect_uris: {
      type: 'string',
    },
    request_object_signing_alg_values_supported: {
      additionalItems: {
        anyOf: [
          {
            enum: ['ES256', 'ES256K', 'EdDSA', 'RS256', 'none'],
            type: 'string',
          },
        ],
      },
      items: [
        {
          enum: ['ES256', 'ES256K', 'EdDSA', 'RS256', 'none'],
          type: 'string',
        },
      ],
      minItems: 1,
      type: 'array',
    },
    response_types_supported: {
      additionalItems: {
        anyOf: [
          {
            enum: ['id_token'],
            type: 'string',
          },
        ],
      },
      items: [
        {
          enum: ['id_token'],
          type: 'string',
        },
      ],
      minItems: 1,
      type: 'array',
    },
    scopes_supported: {
      additionalItems: {
        anyOf: [
          {
            enum: ['address', 'email', 'openid', 'phone', 'profile'],
            type: 'string',
          },
        ],
      },
      items: [
        {
          enum: ['address', 'email', 'openid', 'phone', 'profile'],
          type: 'string',
        },
      ],
      minItems: 1,
      type: 'array',
    },
    subject_identifier_types_supported: {
      additionalItems: {
        anyOf: [
          {
            type: 'string',
          },
        ],
      },
      items: [
        {
          type: 'string',
        },
      ],
      minItems: 1,
      type: 'array',
    },
    subject_types_supported: {
      additionalItems: {
        anyOf: [
          {
            enum: ['pairwase', 'public'],
            type: 'string',
          },
        ],
      },
      items: [
        {
          enum: ['pairwase', 'public'],
          type: 'string',
        },
      ],
      minItems: 1,
      type: 'array',
    },
    tos_uri: {
      type: 'string',
    },
  },
  required: [
    'authorization_endpoint',
    'credential_formats_supported',
    'id_token_signing_alg_values_supported',
    'issuer',
    'request_object_signing_alg_values_supported',
    'response_types_supported',
    'scopes_supported',
    'subject_identifier_types_supported',
    'subject_types_supported',
  ],
  type: 'object',
};
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, 'errors'>;
export const isRegistration = ajv.compile(
  RegistrationSchema,
) as ValidateFunction<Registration>;
export default function validate(value: unknown): Registration {
  if (isRegistration(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(
        isRegistration.errors!.filter((e: any) => e.keyword !== 'if'),
        {dataVar: 'Registration'},
      ) +
        '\n\n' +
        inspect(value),
    );
  }
}
